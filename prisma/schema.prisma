// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email      String  @unique
  password   String
  resetToken String? @map("reset_token")
  // userType   String? @default("personal") @map("user_type")
  // isAdmin    Boolean @default(false) @map("is_admin")

  // // personal info
  // firstName   String?   @map("first_name")
  // lastName    String?   @map("last_name")
  // contactType String?   @map("contact_type")
  // countryCode String?   @map("country_code")
  // phoneNumber String?   @map("phone_number")
  // position    String?   @map("position")
  // dateOfBirth DateTime? @map("date_of_birth")
  // gender      String?
  // title       String?

  // address1   String? @map("address1")
  // address2   String? @map("address2")
  // city       String? @map("city")
  // state      String? @map("state")
  // postalCode String? @map("postal_code")
  // country    String? @map("country")

  @@map("users")
}

model Patient {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // personal info
  name      String?   @map("name")
  contactNo String?   @map("contact_no")
  email     String?   @map("email")
  gender    Gender?
  dob       DateTime?

  address1   String? @map("address1")
  address2   String? @map("address2")
  city       String? @map("city")
  state      String? @map("state")
  postalCode String? @map("postal_code")
  country    String? @map("country")

  visits    PatientVisit[]
  allergies PatientAllergy[]

  @@map("patients")
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

model PatientVisit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  visitDate DateTime @default(now()) @map("visit_date")
  note      String?
  diagnosis String?

  patientId Int     @map("patient_id")
  patient   Patient @relation(fields: [patientId], references: [id])

  @@map("patient_visits")
}

model PatientAllergy {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  refCode     String? @map("ref_code")
  allergyName String  @map("allergy_name")
  note        String?

  patientId Int     @map("patient_id")
  patient   Patient @relation(fields: [patientId], references: [id])

  @@map("patient_allergies")
}
